/* generated_h.h
   Generated by wsdl2h 1.2.9l from ../xsd/mech.xsd ../xsd/ogremeshxml.xsd ../xsd/ogreskeletonxml.xsd and typemap.dat
   2012-02-09 20:18:26 GMT
   Copyright (C) 2001-2007 Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/* NOTE:

 - Compile this file with soapcpp2 to complete the code generation process.
 - Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control schema namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) to browse this file.
 - Use wsdl2h option -l to view the software license terms.

   DO NOT include this file directly into your project.
   Include only the soapcpp2-generated headers and source code files.
*/

//gsoapopt w

/******************************************************************************\
 *                                                                            *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to disable)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

genmech = "urn:apmech/mechs/1"
genmesh = "urn:apmech/meshes"
genskel = "urn:apmech/skeletons"

*/

//gsoap genmech schema namespace:	urn:apmech/mechs/1
//gsoap genmesh schema namespace:	urn:apmech/meshes
//gsoap genskel schema namespace:	urn:apmech/skeletons
//gsoap genmech schema elementForm:	qualified
//gsoap genmech schema attributeForm:	unqualified
//gsoap genmesh schema elementForm:	qualified
//gsoap genmesh schema attributeForm:	unqualified
//gsoap genskel schema elementForm:	qualified
//gsoap genskel schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Schema Types                                                               *
 *                                                                            *
\******************************************************************************/



//  Forward declaration of class genmech__stats.
class genmech__stats;

//  Forward declaration of class genmech__design.
class genmech__design;

//  Forward declaration of class genmech__equSlots.
class genmech__equSlots;

//  Forward declaration of class genmech__equSlot.
class genmech__equSlot;

//  Forward declaration of class genmech__torso.
class genmech__torso;

//  Forward declaration of class genmech__mesh.
class genmech__mesh;

//  Forward declaration of class _genmech__mech.
class _genmech__mech;

//  Forward declaration of class _genmesh__mesh.
class _genmesh__mesh;

//  Forward declaration of class _genmesh__sharedgeometry.
class _genmesh__sharedgeometry;

//  Forward declaration of class _genmesh__submeshes.
class _genmesh__submeshes;

//  Forward declaration of class _genmesh__submesh.
class _genmesh__submesh;

//  Forward declaration of class _genmesh__textures.
class _genmesh__textures;

//  Forward declaration of class _genmesh__texture.
class _genmesh__texture;

//  Forward declaration of class _genmesh__faces.
class _genmesh__faces;

//  Forward declaration of class _genmesh__face.
class _genmesh__face;

//  Forward declaration of class _genmesh__geometry.
class _genmesh__geometry;

//  Forward declaration of class _genmesh__skeletonlink.
class _genmesh__skeletonlink;

//  Forward declaration of class _genmesh__boneassignments.
class _genmesh__boneassignments;

//  Forward declaration of class _genmesh__vertexboneassignment.
class _genmesh__vertexboneassignment;

//  Forward declaration of class _genmesh__levelofdetail.
class _genmesh__levelofdetail;

//  Forward declaration of class _genmesh__lodmanual.
class _genmesh__lodmanual;

//  Forward declaration of class _genmesh__lodgenerated.
class _genmesh__lodgenerated;

//  Forward declaration of class _genmesh__lodfacelist.
class _genmesh__lodfacelist;

//  Forward declaration of class _genmesh__vertexbuffer.
class _genmesh__vertexbuffer;

//  Forward declaration of class _genmesh__vertex.
class _genmesh__vertex;

//  Forward declaration of class _genmesh__position.
class _genmesh__position;

//  Forward declaration of class _genmesh__normal.
class _genmesh__normal;

//  Forward declaration of class _genmesh__tangent.
class _genmesh__tangent;

//  Forward declaration of class _genmesh__binormal.
class _genmesh__binormal;

//  Forward declaration of class _genmesh__colour_USCOREdiffuse.
class _genmesh__colour_USCOREdiffuse;

//  Forward declaration of class _genmesh__colour_USCOREspecular.
class _genmesh__colour_USCOREspecular;

//  Forward declaration of class _genmesh__texcoord.
class _genmesh__texcoord;

//  Forward declaration of class _genmesh__submeshnames.
class _genmesh__submeshnames;

//  Forward declaration of class _genmesh__submeshname.
class _genmesh__submeshname;

//  Forward declaration of class _genmesh__poses.
class _genmesh__poses;

//  Forward declaration of class _genmesh__pose.
class _genmesh__pose;

//  Forward declaration of class _genmesh__poseoffset.
class _genmesh__poseoffset;

//  Forward declaration of class _genmesh__animations.
class _genmesh__animations;

//  Forward declaration of class _genmesh__animation.
class _genmesh__animation;

//  Forward declaration of class _genmesh__tracks.
class _genmesh__tracks;

//  Forward declaration of class _genmesh__track.
class _genmesh__track;

//  Forward declaration of class _genmesh__keyframes.
class _genmesh__keyframes;

//  Forward declaration of class _genmesh__keyframe.
class _genmesh__keyframe;

//  Forward declaration of class _genmesh__poseref.
class _genmesh__poseref;

//  Forward declaration of class _genmesh__extremes.
class _genmesh__extremes;

//  Forward declaration of class _genmesh__submesh_USCOREextremes.
class _genmesh__submesh_USCOREextremes;

//  Forward declaration of class genskel__bones.
class genskel__bones;

//  Forward declaration of class genskel__bone.
class genskel__bone;

//  Forward declaration of class genskel__position.
class genskel__position;

//  Forward declaration of class genskel__rotation.
class genskel__rotation;

//  Forward declaration of class genskel__axis.
class genskel__axis;

//  Forward declaration of class genskel__scale.
class genskel__scale;

//  Forward declaration of class _genskel__skeleton.
class _genskel__skeleton;

//  Forward declaration of class _genskel__bonehierarchy.
class _genskel__bonehierarchy;

//  Forward declaration of class _genskel__boneparent.
class _genskel__boneparent;

//  Forward declaration of class _genskel__animations.
class _genskel__animations;

//  Forward declaration of class _genskel__animation.
class _genskel__animation;

//  Forward declaration of class _genskel__tracks.
class _genskel__tracks;

//  Forward declaration of class _genskel__track.
class _genskel__track;

//  Forward declaration of class _genskel__keyframes.
class _genskel__keyframes;

//  Forward declaration of class _genskel__keyframe.
class _genskel__keyframe;

//  Forward declaration of class _genskel__translate.
class _genskel__translate;

//  Forward declaration of class _genskel__rotate.
class _genskel__rotate;

//  Forward declaration of class _genskel__animationlinks.
class _genskel__animationlinks;

//  Forward declaration of class _genskel__animationlink.
class _genskel__animationlink;

/// "urn:apmech/mechs/1":stats is a complexType.
class genmech__stats
{ public:
/// Element maxTurnRate of type xs:int.
    int                                  maxTurnRate                    1;	///< Required element.
/// Element maxForwardAcceleration of type xs:int.
    int                                  maxForwardAcceleration         1;	///< Required element.
/// Element maxBackwardAcceleration of type xs:int.
    int                                  maxBackwardAcceleration        1;	///< Required element.
/// Element maxSpeed of type xs:int.
    int                                  maxSpeed                       1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:apmech/mechs/1":design is a complexType.
class genmech__design
{ public:
/// Element torso of type "urn:apmech/mechs/1":torso.
    genmech__torso*                      torso                          1;	///< Required element.
/// Element equipmentSlots of type "urn:apmech/mechs/1":equSlots.
    genmech__equSlots*                   equipmentSlots                 1;	///< Required element.
/// Element torsoBone of type xs:string.
    std::string                          torsoBone                      1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:apmech/mechs/1":equSlots is a complexType.
class genmech__equSlots
{ public:
/// Vector of genmech__equSlot* with length 0..unbounded
    std::vector<genmech__equSlot*      > slot                           0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:apmech/mechs/1":equSlot is a complexType.
class genmech__equSlot
{ public:
/// Element boneName of type xs:string.
    std::string                          boneName                       1;	///< Required element.
/// Element defaultEqu of type xs:string.
    std::string                          defaultEqu                     1 = "UNUSED";	///< Default value="UNUSED".
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:apmech/mechs/1":torso is a complexType.
class genmech__torso
{ public:
/// Attribute turningRadius of type xs:int.
   @int                                  turningRadius                  0 = 90;	///< Default value="90".
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:apmech/mechs/1":mesh is a complexType.
class genmech__mesh
{ public:
/// Attribute translation of type xs:string.
   @std::string                          translation                    0 = "000.00;000.00;000.00";	///< Default value="000.00;000.00;000.00".
/// Attribute file of type xs:string.
   @std::string                          file                           1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:apmech/mechs/1":mech of complexType.

/// "urn:apmech/mechs/1":mech is a complexType.
class _genmech__mech
{ public:
/// Element schemaVersion of type xs:int.
    int                                  schemaVersion                  1;	///< Required element.
/// Element name of type xs:string.
    std::string                          name                           1;	///< Required element.
/// Element stats of type "urn:apmech/mechs/1":stats.
    genmech__stats*                      stats                          1;	///< Required element.
/// Element design of type "urn:apmech/mechs/1":design.
    genmech__design*                     design                         1;	///< Required element.
/// Element mesh of type "urn:apmech/mechs/1":mesh.
    genmech__mesh*                       mesh                           1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:apmech/meshes":mesh of complexType.

/// "urn:apmech/meshes":mesh is a complexType.
class _genmesh__mesh
{ public:
/// Element reference "urn:apmech/meshes":sharedgeometry.
    _genmesh__sharedgeometry*            genmesh__sharedgeometry        0;	///< Optional element.
/// Element reference "urn:apmech/meshes":submeshes.
    _genmesh__submeshes*                 genmesh__submeshes             1;	///< Required element.
/// Element reference "urn:apmech/meshes":skeletonlink.
    _genmesh__skeletonlink*              genmesh__skeletonlink          0;	///< Optional element.
/// Element reference "urn:apmech/meshes":boneassignments.
    _genmesh__boneassignments*           genmesh__boneassignments       0;	///< Optional element.
/// Element reference "urn:apmech/meshes":levelofdetail.
    _genmesh__levelofdetail*             genmesh__levelofdetail         0;	///< Optional element.
/// Element reference "urn:apmech/meshes":submeshnames.
    _genmesh__submeshnames*              genmesh__submeshnames          0;	///< Optional element.
/// Element reference "urn:apmech/meshes":poses.
    _genmesh__poses*                     genmesh__poses                 0;	///< Optional element.
/// Element reference "urn:apmech/meshes":animations.
    _genmesh__animations*                genmesh__animations            0;	///< Optional element.
/// Element reference "urn:apmech/meshes":extremes.
    _genmesh__extremes*                  genmesh__extremes              0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:apmech/meshes":sharedgeometry of complexType.

/// "urn:apmech/meshes":sharedgeometry is a complexType.
class _genmesh__sharedgeometry
{ public:
/// Vector of _genmesh__vertexbuffer* with length 1..unbounded
    std::vector<_genmesh__vertexbuffer*> genmesh__vertexbuffer          1;
/// Attribute vertexcount of type xs:string.
   @std::string                          vertexcount                    1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:apmech/meshes":submeshes of complexType.

/// "urn:apmech/meshes":submeshes is a complexType.
class _genmesh__submeshes
{ public:
/// Vector of _genmesh__submesh* with length 1..unbounded
    std::vector<_genmesh__submesh*     > genmesh__submesh               1;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:apmech/meshes":submesh of complexType.

/// "urn:apmech/meshes":submesh is a complexType.
class _genmesh__submesh
{ public:
/// Element reference "urn:apmech/meshes":textures.
    _genmesh__textures*                  genmesh__textures              0;	///< Optional element.
/// Element reference "urn:apmech/meshes":faces.
    _genmesh__faces*                     genmesh__faces                 1;	///< Required element.
/// Element reference "urn:apmech/meshes":geometry.
    _genmesh__geometry*                  genmesh__geometry              0;	///< Optional element.
/// Element reference "urn:apmech/meshes":boneassignments.
    _genmesh__boneassignments*           genmesh__boneassignments       0;	///< Optional element.
/// Attribute material of type xs:string.
   @std::string                          material                       1;	///< Required attribute.
@    enum _genmesh__submesh_usesharedvertices
    {
	_genmesh__submesh_usesharedvertices__true_,	///< xs:string value="true"
	_genmesh__submesh_usesharedvertices__false_,	///< xs:string value="false"
    }
                                         usesharedvertices              0;	///< Default value="true".
@    enum _genmesh__submesh_use32bitindexes
    {
	_genmesh__submesh_use32bitindexes__true_,	///< xs:string value="true"
	_genmesh__submesh_use32bitindexes__false_,	///< xs:string value="false"
    }
                                         use32bitindexes                0;	///< Default value="false".
@    enum _genmesh__submesh_operationtype
    {
	_genmesh__submesh_operationtype__triangle_USCORElist,	///< xs:string value="triangle_list"
	_genmesh__submesh_operationtype__triangle_USCOREstrip,	///< xs:string value="triangle_strip"
	_genmesh__submesh_operationtype__triangle_USCOREfan,	///< xs:string value="triangle_fan"
    }
                                         operationtype                  0;	///< Default value="triangle_list".
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:apmech/meshes":textures of complexType.

/// "urn:apmech/meshes":textures is a complexType.
class _genmesh__textures
{ public:
/// Vector of _genmesh__texture* with length 1..unbounded
    std::vector<_genmesh__texture*     > genmesh__texture               1;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:apmech/meshes":texture of complexType.

/// "urn:apmech/meshes":texture is a complexType.
class _genmesh__texture
{ public:
/// Attribute alias of type xs:string.
   @std::string                          alias                          1;	///< Required attribute.
/// Attribute name of type xs:string.
   @std::string                          name                           1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:apmech/meshes":faces of complexType.

/// "urn:apmech/meshes":faces is a complexType.
class _genmesh__faces
{ public:
/// Vector of _genmesh__face* with length 1..unbounded
    std::vector<_genmesh__face*        > genmesh__face                  1;
/// Attribute count of type xs:string.
   @std::string*                         count                          0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:apmech/meshes":face of complexType.

/// "urn:apmech/meshes":face is a complexType.
class _genmesh__face
{ public:
/// Attribute v1 of type xs:string.
   @std::string                          v1                             1;	///< Required attribute.
/// Attribute v2 of type xs:string.
   @std::string*                         v2                             0;	///< Optional attribute.
/// Attribute v3 of type xs:string.
   @std::string*                         v3                             0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:apmech/meshes":geometry of complexType.

/// "urn:apmech/meshes":geometry is a complexType.
class _genmesh__geometry
{ public:
/// Vector of _genmesh__vertexbuffer* with length 1..unbounded
    std::vector<_genmesh__vertexbuffer*> genmesh__vertexbuffer          1;
/// Attribute vertexcount of type xs:string.
   @std::string*                         vertexcount                    0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:apmech/meshes":skeletonlink of complexType.

/// "urn:apmech/meshes":skeletonlink is a complexType.
class _genmesh__skeletonlink
{ public:
/// Attribute name of type xs:string.
   @std::string                          name                           1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:apmech/meshes":boneassignments of complexType.

/// "urn:apmech/meshes":boneassignments is a complexType.
class _genmesh__boneassignments
{ public:
/// Vector of _genmesh__vertexboneassignment* with length 1..unbounded
    std::vector<_genmesh__vertexboneassignment*> genmesh__vertexboneassignment  1;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:apmech/meshes":vertexboneassignment of complexType.

/// "urn:apmech/meshes":vertexboneassignment is a complexType.
class _genmesh__vertexboneassignment
{ public:
/// Attribute vertexindex of type xs:string.
   @std::string                          vertexindex                    1;	///< Required attribute.
/// Attribute boneindex of type xs:string.
   @std::string                          boneindex                      1;	///< Required attribute.
/// Attribute weight of type xs:string.
   @std::string                          weight                         0 = "1.0";	///< Default value="1.0".
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:apmech/meshes":levelofdetail of complexType.

/// "urn:apmech/meshes":levelofdetail is a complexType.
class _genmesh__levelofdetail
{ public:
/// CHOICE OF ELEMENTS FOR choice maxOccurs="unbounded"
    int                                  __size_levelofdetail          ;
    class __genmesh__union_levelofdetail
    {
    int                                  __union_levelofdetail         ;	///< Union _genmesh__union_levelofdetail selector: set to SOAP_UNION__genmesh__union_levelofdetail_<fieldname>
/// Union for choice in type genmesh__levelofdetail
    union _genmesh__union_levelofdetail
    {
/// Element reference "urn:apmech/meshes":lodmanual.

// Warning: undefined QName 'lodmanual' for type 'genmesh__lodmanual' (FIXME: check WSDL and schema definitions)
    _genmesh__lodmanual*                 genmesh__lodmanual             1;	///< Required element.
/// Element reference "urn:apmech/meshes":lodgenerated.

// Warning: undefined QName 'lodgenerated' for type 'genmesh__lodgenerated' (FIXME: check WSDL and schema definitions)
    _genmesh__lodgenerated*              genmesh__lodgenerated          1;	///< Required element.
    }                                    union_levelofdetail           ;
    }                                   *__union_levelofdetail         ;
//  END OF CHOICE
/// Attribute numlevels of type xs:string.
   @std::string                          numlevels                      1;	///< Required attribute.
@    enum _genmesh__levelofdetail_manual
    {
	_genmesh__levelofdetail_manual__true_,	///< xs:string value="true"
	_genmesh__levelofdetail_manual__false_,	///< xs:string value="false"
    }
                                         manual                         0;	///< Default value="false".
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:apmech/meshes":lodmanual of complexType.

/// "urn:apmech/meshes":lodmanual is a complexType.
class _genmesh__lodmanual
{ public:
/// Attribute fromdepthsquared of type xs:string.
   @std::string                          fromdepthsquared               1;	///< Required attribute.
/// Attribute meshname of type xs:string.
   @std::string                          meshname                       1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:apmech/meshes":lodgenerated of complexType.

/// "urn:apmech/meshes":lodgenerated is a complexType.
class _genmesh__lodgenerated
{ public:
/// Element reference "urn:apmech/meshes":lodfacelist.
    _genmesh__lodfacelist*               genmesh__lodfacelist           1;	///< Required element.
/// Attribute fromdepthsquared of type xs:string.
   @std::string                          fromdepthsquared               1;	///< Required attribute.
/// Attribute meshname of type xs:string.
   @std::string                          meshname                       1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:apmech/meshes":lodfacelist of complexType.

/// "urn:apmech/meshes":lodfacelist is a complexType.
class _genmesh__lodfacelist
{ public:
/// SEQUENCE OF ELEMENTS maxOccurs="unbounded"
    int                                  __size_lodfacelist_sequence   ;
    class __genmesh__lodfacelist_sequence
    {
/// Element reference "urn:apmech/meshes":face.
    _genmesh__face*                      genmesh__face                  1;	///< Required element.
    }                                   *__lodfacelist_sequence        ;
//  END OF SEQUENCE
/// Attribute submeshindex of type xs:string.
   @std::string                          submeshindex                   1;	///< Required attribute.
/// Attribute numfaces of type xs:string.
   @std::string                          numfaces                       1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:apmech/meshes":vertexbuffer of complexType.

/// "urn:apmech/meshes":vertexbuffer is a complexType.
class _genmesh__vertexbuffer
{ public:
/// Vector of _genmesh__vertex* with length 1..unbounded
    std::vector<_genmesh__vertex*      > genmesh__vertex                1;
@    enum _genmesh__vertexbuffer_positions
    {
	_genmesh__vertexbuffer_positions__true_,	///< xs:string value="true"
	_genmesh__vertexbuffer_positions__false_,	///< xs:string value="false"
    }
                                         positions                      0;	///< Default value="false".
@    enum _genmesh__vertexbuffer_normals
    {
	_genmesh__vertexbuffer_normals__true_,	///< xs:string value="true"
	_genmesh__vertexbuffer_normals__false_,	///< xs:string value="false"
    }
                                         normals                        0;	///< Default value="false".
@    enum _genmesh__vertexbuffer_colours_USCOREdiffuse
    {
	_genmesh__vertexbuffer_colours_USCOREdiffuse__true_,	///< xs:string value="true"
	_genmesh__vertexbuffer_colours_USCOREdiffuse__false_,	///< xs:string value="false"
    }
                                         colours_USCOREdiffuse          0;	///< Default value="false".
@    enum _genmesh__vertexbuffer_colours_USCOREspecular
    {
	_genmesh__vertexbuffer_colours_USCOREspecular__true_,	///< xs:string value="true"
	_genmesh__vertexbuffer_colours_USCOREspecular__false_,	///< xs:string value="false"
    }
                                         colours_USCOREspecular         0;	///< Default value="false".
@    enum _genmesh__vertexbuffer_texture_USCOREcoords
    {
	_genmesh__vertexbuffer_texture_USCOREcoords__0 = 0,	///< xs:string value="0"
	_genmesh__vertexbuffer_texture_USCOREcoords__1 = 1,	///< xs:string value="1"
	_genmesh__vertexbuffer_texture_USCOREcoords__2 = 2,	///< xs:string value="2"
	_genmesh__vertexbuffer_texture_USCOREcoords__3 = 3,	///< xs:string value="3"
	_genmesh__vertexbuffer_texture_USCOREcoords__4 = 4,	///< xs:string value="4"
	_genmesh__vertexbuffer_texture_USCOREcoords__5 = 5,	///< xs:string value="5"
	_genmesh__vertexbuffer_texture_USCOREcoords__6 = 6,	///< xs:string value="6"
	_genmesh__vertexbuffer_texture_USCOREcoords__7 = 7,	///< xs:string value="7"
	_genmesh__vertexbuffer_texture_USCOREcoords__8 = 8,	///< xs:string value="8"
    }
                                         texture_USCOREcoords           0;	///< Default value="0".
@    enum _genmesh__vertexbuffer_texture_USCOREcoord_USCOREdimensions_USCORE0
    {
	_genmesh__vertexbuffer_texture_USCOREcoord_USCOREdimensions_USCORE0__0 = 0,	///< xs:string value="0"
	_genmesh__vertexbuffer_texture_USCOREcoord_USCOREdimensions_USCORE0__1 = 1,	///< xs:string value="1"
	_genmesh__vertexbuffer_texture_USCOREcoord_USCOREdimensions_USCORE0__2 = 2,	///< xs:string value="2"
	_genmesh__vertexbuffer_texture_USCOREcoord_USCOREdimensions_USCORE0__3 = 3,	///< xs:string value="3"
    }
                                         texture_USCOREcoord_USCOREdimensions_USCORE0 0;	///< Default value="2".
@    enum _genmesh__vertexbuffer_texture_USCOREcoord_USCOREdimensions_USCORE1
    {
	_genmesh__vertexbuffer_texture_USCOREcoord_USCOREdimensions_USCORE1__0 = 0,	///< xs:string value="0"
	_genmesh__vertexbuffer_texture_USCOREcoord_USCOREdimensions_USCORE1__1 = 1,	///< xs:string value="1"
	_genmesh__vertexbuffer_texture_USCOREcoord_USCOREdimensions_USCORE1__2 = 2,	///< xs:string value="2"
	_genmesh__vertexbuffer_texture_USCOREcoord_USCOREdimensions_USCORE1__3 = 3,	///< xs:string value="3"
    }
                                         texture_USCOREcoord_USCOREdimensions_USCORE1 0;	///< Default value="2".
@    enum _genmesh__vertexbuffer_texture_USCOREcoord_USCOREdimensions_USCORE2
    {
	_genmesh__vertexbuffer_texture_USCOREcoord_USCOREdimensions_USCORE2__0 = 0,	///< xs:string value="0"
	_genmesh__vertexbuffer_texture_USCOREcoord_USCOREdimensions_USCORE2__1 = 1,	///< xs:string value="1"
	_genmesh__vertexbuffer_texture_USCOREcoord_USCOREdimensions_USCORE2__2 = 2,	///< xs:string value="2"
	_genmesh__vertexbuffer_texture_USCOREcoord_USCOREdimensions_USCORE2__3 = 3,	///< xs:string value="3"
    }
                                         texture_USCOREcoord_USCOREdimensions_USCORE2 0;	///< Default value="2".
@    enum _genmesh__vertexbuffer_texture_USCOREcoord_USCOREdimensions_USCORE3
    {
	_genmesh__vertexbuffer_texture_USCOREcoord_USCOREdimensions_USCORE3__0 = 0,	///< xs:string value="0"
	_genmesh__vertexbuffer_texture_USCOREcoord_USCOREdimensions_USCORE3__1 = 1,	///< xs:string value="1"
	_genmesh__vertexbuffer_texture_USCOREcoord_USCOREdimensions_USCORE3__2 = 2,	///< xs:string value="2"
	_genmesh__vertexbuffer_texture_USCOREcoord_USCOREdimensions_USCORE3__3 = 3,	///< xs:string value="3"
    }
                                         texture_USCOREcoord_USCOREdimensions_USCORE3 0;	///< Default value="2".
@    enum _genmesh__vertexbuffer_texture_USCOREcoord_USCOREdimensions_USCORE4
    {
	_genmesh__vertexbuffer_texture_USCOREcoord_USCOREdimensions_USCORE4__0 = 0,	///< xs:string value="0"
	_genmesh__vertexbuffer_texture_USCOREcoord_USCOREdimensions_USCORE4__1 = 1,	///< xs:string value="1"
	_genmesh__vertexbuffer_texture_USCOREcoord_USCOREdimensions_USCORE4__2 = 2,	///< xs:string value="2"
	_genmesh__vertexbuffer_texture_USCOREcoord_USCOREdimensions_USCORE4__3 = 3,	///< xs:string value="3"
    }
                                         texture_USCOREcoord_USCOREdimensions_USCORE4 0;	///< Default value="2".
@    enum _genmesh__vertexbuffer_texture_USCOREcoord_USCOREdimensions_USCORE5
    {
	_genmesh__vertexbuffer_texture_USCOREcoord_USCOREdimensions_USCORE5__0 = 0,	///< xs:string value="0"
	_genmesh__vertexbuffer_texture_USCOREcoord_USCOREdimensions_USCORE5__1 = 1,	///< xs:string value="1"
	_genmesh__vertexbuffer_texture_USCOREcoord_USCOREdimensions_USCORE5__2 = 2,	///< xs:string value="2"
	_genmesh__vertexbuffer_texture_USCOREcoord_USCOREdimensions_USCORE5__3 = 3,	///< xs:string value="3"
    }
                                         texture_USCOREcoord_USCOREdimensions_USCORE5 0;	///< Default value="2".
@    enum _genmesh__vertexbuffer_texture_USCOREcoord_USCOREdimensions_USCORE6
    {
	_genmesh__vertexbuffer_texture_USCOREcoord_USCOREdimensions_USCORE6__0 = 0,	///< xs:string value="0"
	_genmesh__vertexbuffer_texture_USCOREcoord_USCOREdimensions_USCORE6__1 = 1,	///< xs:string value="1"
	_genmesh__vertexbuffer_texture_USCOREcoord_USCOREdimensions_USCORE6__2 = 2,	///< xs:string value="2"
	_genmesh__vertexbuffer_texture_USCOREcoord_USCOREdimensions_USCORE6__3 = 3,	///< xs:string value="3"
    }
                                         texture_USCOREcoord_USCOREdimensions_USCORE6 0;	///< Default value="2".
@    enum _genmesh__vertexbuffer_texture_USCOREcoord_USCOREdimensions_USCORE7
    {
	_genmesh__vertexbuffer_texture_USCOREcoord_USCOREdimensions_USCORE7__0 = 0,	///< xs:string value="0"
	_genmesh__vertexbuffer_texture_USCOREcoord_USCOREdimensions_USCORE7__1 = 1,	///< xs:string value="1"
	_genmesh__vertexbuffer_texture_USCOREcoord_USCOREdimensions_USCORE7__2 = 2,	///< xs:string value="2"
	_genmesh__vertexbuffer_texture_USCOREcoord_USCOREdimensions_USCORE7__3 = 3,	///< xs:string value="3"
    }
                                         texture_USCOREcoord_USCOREdimensions_USCORE7 0;	///< Default value="2".
@    enum _genmesh__vertexbuffer_tangents
    {
	_genmesh__vertexbuffer_tangents__true_,	///< xs:string value="true"
	_genmesh__vertexbuffer_tangents__false_,	///< xs:string value="false"
    }
                                         tangents                       0;	///< Default value="false".
@    enum _genmesh__vertexbuffer_tangent_USCOREdimensions
    {
	_genmesh__vertexbuffer_tangent_USCOREdimensions__3 = 3,	///< xs:string value="3"
	_genmesh__vertexbuffer_tangent_USCOREdimensions__4 = 4,	///< xs:string value="4"
    }
                                         tangent_USCOREdimensions       0;	///< Default value="3".
@    enum _genmesh__vertexbuffer_binormals
    {
	_genmesh__vertexbuffer_binormals__true_,	///< xs:string value="true"
	_genmesh__vertexbuffer_binormals__false_,	///< xs:string value="false"
    }
                                         binormals                      0;	///< Default value="false".
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:apmech/meshes":vertex of complexType.

/// "urn:apmech/meshes":vertex is a complexType.
class _genmesh__vertex
{ public:
/// Element reference "urn:apmech/meshes":position.
    _genmesh__position*                  genmesh__position              1;	///< Required element.
/// Element reference "urn:apmech/meshes":normal.
    _genmesh__normal*                    genmesh__normal                0;	///< Optional element.
/// Element reference "urn:apmech/meshes":tangent.
    _genmesh__tangent*                   genmesh__tangent               0;	///< Optional element.
/// Element reference "urn:apmech/meshes":binormal.
    _genmesh__binormal*                  genmesh__binormal              0;	///< Optional element.
/// Element reference "urn:apmech/meshes":colour_diffuse.
    _genmesh__colour_USCOREdiffuse*      genmesh__colour_USCOREdiffuse  0;	///< Optional element.
/// Element reference "urn:apmech/meshes":colour_specular.
    _genmesh__colour_USCOREspecular*     genmesh__colour_USCOREspecular 0;	///< Optional element.
/// Vector of _genmesh__texcoord* with length 0..unbounded
    std::vector<_genmesh__texcoord*    > genmesh__texcoord              0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:apmech/meshes":position of complexType.

/// "urn:apmech/meshes":position is a complexType.
class _genmesh__position
{ public:
/// Attribute x of type xs:string.
   @std::string                          x                              1;	///< Required attribute.
/// Attribute y of type xs:string.
   @std::string                          y                              1;	///< Required attribute.
/// Attribute z of type xs:string.
   @std::string                          z                              1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:apmech/meshes":normal of complexType.

/// "urn:apmech/meshes":normal is a complexType.
class _genmesh__normal
{ public:
/// Attribute x of type xs:string.
   @std::string                          x                              1;	///< Required attribute.
/// Attribute y of type xs:string.
   @std::string                          y                              1;	///< Required attribute.
/// Attribute z of type xs:string.
   @std::string                          z                              1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:apmech/meshes":tangent of complexType.

/// "urn:apmech/meshes":tangent is a complexType.
class _genmesh__tangent
{ public:
/// Attribute x of type xs:string.
   @std::string                          x                              1;	///< Required attribute.
/// Attribute y of type xs:string.
   @std::string                          y                              1;	///< Required attribute.
/// Attribute z of type xs:string.
   @std::string                          z                              1;	///< Required attribute.
/// Attribute w of type xs:string.
   @std::string                          w                              0 = "1";	///< Default value="1".
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:apmech/meshes":binormal of complexType.

/// "urn:apmech/meshes":binormal is a complexType.
class _genmesh__binormal
{ public:
/// Attribute x of type xs:string.
   @std::string                          x                              1;	///< Required attribute.
/// Attribute y of type xs:string.
   @std::string                          y                              1;	///< Required attribute.
/// Attribute z of type xs:string.
   @std::string                          z                              1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:apmech/meshes":colour_diffuse of complexType.

/// "urn:apmech/meshes":colour_diffuse is a complexType.
class _genmesh__colour_USCOREdiffuse
{ public:
/// Attribute value of type xs:string.
   @std::string                          value                          1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:apmech/meshes":colour_specular of complexType.

/// "urn:apmech/meshes":colour_specular is a complexType.
class _genmesh__colour_USCOREspecular
{ public:
/// Attribute value of type xs:string.
   @std::string                          value                          1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:apmech/meshes":texcoord of complexType.

/// "urn:apmech/meshes":texcoord is a complexType.
class _genmesh__texcoord
{ public:
/// Attribute u of type xs:string.
   @std::string                          u                              1;	///< Required attribute.
/// Attribute v of type xs:string.
   @std::string                          v                              0 = "0";	///< Default value="0".
/// Attribute w of type xs:string.
   @std::string                          w                              0 = "0";	///< Default value="0".
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:apmech/meshes":submeshnames of complexType.

/// "urn:apmech/meshes":submeshnames is a complexType.
class _genmesh__submeshnames
{ public:
/// Vector of _genmesh__submeshname* with length 1..unbounded
    std::vector<_genmesh__submeshname* > genmesh__submeshname           1;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:apmech/meshes":submeshname of complexType.

/// "urn:apmech/meshes":submeshname is a complexType.
class _genmesh__submeshname
{ public:
/// Attribute name of type xs:string.
   @std::string                          name                           1;	///< Required attribute.
/// Attribute index of type xs:string.
   @std::string                          index                          1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:apmech/meshes":poses of complexType.

/// "urn:apmech/meshes":poses is a complexType.
class _genmesh__poses
{ public:
/// Vector of _genmesh__pose* with length 1..unbounded
    std::vector<_genmesh__pose*        > genmesh__pose                  1;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:apmech/meshes":pose of complexType.

/// "urn:apmech/meshes":pose is a complexType.
class _genmesh__pose
{ public:
/// Vector of _genmesh__poseoffset* with length 1..unbounded
    std::vector<_genmesh__poseoffset*  > genmesh__poseoffset            1;
@    enum _genmesh__pose_target
    {
	_genmesh__pose_target__mesh,	///< xs:string value="mesh"
	_genmesh__pose_target__submesh,	///< xs:string value="submesh"
    }
                                         target                         1;	///< Required attribute.
/// Attribute index of type xs:string.
   @std::string                          index                          0 = "0";	///< Default value="0".
/// Attribute name of type xs:string.
   @std::string                          name                           0 = "";	///< Default value="".
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:apmech/meshes":poseoffset of complexType.

/// "urn:apmech/meshes":poseoffset is a complexType.
class _genmesh__poseoffset
{ public:
/// Attribute index of type xs:string.
   @std::string                          index                          1;	///< Required attribute.
/// Attribute x of type xs:string.
   @std::string                          x                              1;	///< Required attribute.
/// Attribute y of type xs:string.
   @std::string                          y                              1;	///< Required attribute.
/// Attribute z of type xs:string.
   @std::string                          z                              1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:apmech/meshes":animations of complexType.

/// "urn:apmech/meshes":animations is a complexType.
class _genmesh__animations
{ public:
/// Vector of _genmesh__animation* with length 1..unbounded
    std::vector<_genmesh__animation*   > genmesh__animation             1;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:apmech/meshes":animation of complexType.

/// "urn:apmech/meshes":animation is a complexType.
class _genmesh__animation
{ public:
/// Element reference "urn:apmech/meshes":tracks.
    _genmesh__tracks*                    genmesh__tracks                1;	///< Required element.
/// Attribute name of type xs:string.
   @std::string                          name                           1;	///< Required attribute.
/// Attribute length of type xs:string.
   @std::string                          length                         1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:apmech/meshes":tracks of complexType.

/// "urn:apmech/meshes":tracks is a complexType.
class _genmesh__tracks
{ public:
/// Vector of _genmesh__track* with length 1..unbounded
    std::vector<_genmesh__track*       > genmesh__track                 1;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:apmech/meshes":track of complexType.

/// "urn:apmech/meshes":track is a complexType.
class _genmesh__track
{ public:
/// Element reference "urn:apmech/meshes":keyframes.
    _genmesh__keyframes*                 genmesh__keyframes             1;	///< Required element.
@    enum _genmesh__track_target
    {
	_genmesh__track_target__mesh,	///< xs:string value="mesh"
	_genmesh__track_target__submesh,	///< xs:string value="submesh"
    }
                                         target                         1;	///< Required attribute.
/// Attribute index of type xs:string.
   @std::string                          index                          0 = "0";	///< Default value="0".
@    enum _genmesh__track_type
    {
	_genmesh__track_type__morph,	///< xs:string value="morph"
	_genmesh__track_type__pose,	///< xs:string value="pose"
    }
                                         type                           1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:apmech/meshes":keyframes of complexType.

/// "urn:apmech/meshes":keyframes is a complexType.
class _genmesh__keyframes
{ public:
/// Vector of _genmesh__keyframe* with length 0..unbounded
    std::vector<_genmesh__keyframe*    > genmesh__keyframe              0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:apmech/meshes":keyframe of complexType.

/// "urn:apmech/meshes":keyframe is a complexType.
class _genmesh__keyframe
{ public:
/// Vector of _genmesh__position* with length 0..unbounded
    std::vector<_genmesh__position*    > genmesh__position              0;
/// Vector of _genmesh__poseref* with length 0..unbounded
    std::vector<_genmesh__poseref*     > genmesh__poseref               0;
/// Attribute time of type xs:string.
   @std::string                          time                           1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:apmech/meshes":poseref of complexType.

/// "urn:apmech/meshes":poseref is a complexType.
class _genmesh__poseref
{ public:
/// Attribute poseindex of type xs:string.
   @std::string                          poseindex                      1;	///< Required attribute.
/// Attribute influence of type xs:string.
   @std::string                          influence                      0 = "1.0";	///< Default value="1.0".
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:apmech/meshes":extremes of complexType.

/// "urn:apmech/meshes":extremes is a complexType.
class _genmesh__extremes
{ public:
/// Vector of _genmesh__submesh* with length 1..unbounded
    std::vector<_genmesh__submesh*     > genmesh__submesh               1;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:apmech/meshes":submesh_extremes of complexType.

/// "urn:apmech/meshes":submesh_extremes is a complexType.
class _genmesh__submesh_USCOREextremes
{ public:
/// Vector of _genmesh__position* with length 1..unbounded
    std::vector<_genmesh__position*    > genmesh__position              1;
/// Attribute index of type xs:string.
   @std::string                          index                          1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:apmech/skeletons":bones is a complexType.
class genskel__bones
{ public:
/// Vector of genskel__bone* with length 1..unbounded
    std::vector<genskel__bone*         > bone                           1;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:apmech/skeletons":bone is a complexType.
class genskel__bone
{ public:
/// Element position of type "urn:apmech/skeletons":position.
    genskel__position*                   position                       1;	///< Required element.
/// Element rotation of type "urn:apmech/skeletons":rotation.
    genskel__rotation*                   rotation                       1;	///< Required element.
/// Element scale of type "urn:apmech/skeletons":scale.
    genskel__scale*                      scale                          0;	///< Optional element.
/// Attribute id of type xs:string.
   @std::string                          id                             1;	///< Required attribute.
/// Attribute name of type xs:string.
   @std::string                          name                           1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:apmech/skeletons":position is a complexType.
class genskel__position
{ public:
/// Attribute x of type xs:string.
   @std::string                          x                              1;	///< Required attribute.
/// Attribute y of type xs:string.
   @std::string                          y                              1;	///< Required attribute.
/// Attribute z of type xs:string.
   @std::string                          z                              1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:apmech/skeletons":rotation is a complexType.
class genskel__rotation
{ public:
/// Element axis of type "urn:apmech/skeletons":axis.
    genskel__axis*                       axis                           1;	///< Required element.
/// Attribute angle of type xs:string.
   @std::string                          angle                          1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:apmech/skeletons":axis is a complexType.
class genskel__axis
{ public:
/// Attribute x of type xs:string.
   @std::string                          x                              1;	///< Required attribute.
/// Attribute y of type xs:string.
   @std::string                          y                              1;	///< Required attribute.
/// Attribute z of type xs:string.
   @std::string                          z                              1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:apmech/skeletons":scale is a complexType.
class genskel__scale
{ public:
/// Attribute factor of type xs:string.
   @std::string*                         factor                         0;	///< Optional attribute.
/// Attribute x of type xs:string.
   @std::string*                         x                              0;	///< Optional attribute.
/// Attribute y of type xs:string.
   @std::string*                         y                              0;	///< Optional attribute.
/// Attribute z of type xs:string.
   @std::string*                         z                              0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:apmech/skeletons":skeleton of complexType.

/// "urn:apmech/skeletons":skeleton is a complexType.
class _genskel__skeleton
{ public:
/// Element bones of type "urn:apmech/skeletons":bones.
    genskel__bones*                      bones                          1;	///< Required element.
/// Element reference "urn:apmech/skeletons":bonehierarchy.
    _genskel__bonehierarchy*             genskel__bonehierarchy         1;	///< Required element.
/// Element reference "urn:apmech/skeletons":animations.
    _genskel__animations*                genskel__animations            0;	///< Optional element.
/// Element reference "urn:apmech/skeletons":animationlinks.
    _genskel__animationlinks*            genskel__animationlinks        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:apmech/skeletons":bonehierarchy of complexType.

/// "urn:apmech/skeletons":bonehierarchy is a complexType.
class _genskel__bonehierarchy
{ public:
/// Vector of _genskel__boneparent* with length 0..unbounded
    std::vector<_genskel__boneparent*  > genskel__boneparent            0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:apmech/skeletons":boneparent of complexType.

/// "urn:apmech/skeletons":boneparent is a complexType.
class _genskel__boneparent
{ public:
/// Attribute bone of type xs:string.
   @std::string                          bone                           1;	///< Required attribute.
/// Attribute parent of type xs:string.
   @std::string                          parent                         1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:apmech/skeletons":animations of complexType.

/// "urn:apmech/skeletons":animations is a complexType.
class _genskel__animations
{ public:
/// Vector of _genskel__animation* with length 1..unbounded
    std::vector<_genskel__animation*   > genskel__animation             1;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:apmech/skeletons":animation of complexType.

/// "urn:apmech/skeletons":animation is a complexType.
class _genskel__animation
{ public:
/// Element reference "urn:apmech/skeletons":tracks.
    _genskel__tracks*                    genskel__tracks                1;	///< Required element.
/// Attribute name of type xs:string.
   @std::string                          name                           1;	///< Required attribute.
/// Attribute length of type xs:string.
   @std::string                          length                         1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:apmech/skeletons":tracks of complexType.

/// "urn:apmech/skeletons":tracks is a complexType.
class _genskel__tracks
{ public:
/// Vector of _genskel__track* with length 1..unbounded
    std::vector<_genskel__track*       > genskel__track                 1;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:apmech/skeletons":track of complexType.

/// "urn:apmech/skeletons":track is a complexType.
class _genskel__track
{ public:
/// Element reference "urn:apmech/skeletons":keyframes.
    _genskel__keyframes*                 genskel__keyframes             1;	///< Required element.
/// Attribute bone of type xs:string.
   @std::string                          bone                           1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:apmech/skeletons":keyframes of complexType.

/// "urn:apmech/skeletons":keyframes is a complexType.
class _genskel__keyframes
{ public:
/// Vector of _genskel__keyframe* with length 1..unbounded
    std::vector<_genskel__keyframe*    > genskel__keyframe              1;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:apmech/skeletons":keyframe of complexType.

/// "urn:apmech/skeletons":keyframe is a complexType.
class _genskel__keyframe
{ public:
/// Element reference "urn:apmech/skeletons":translate.
    _genskel__translate*                 genskel__translate             0;	///< Optional element.
/// Element reference "urn:apmech/skeletons":rotate.
    _genskel__rotate*                    genskel__rotate                0;	///< Optional element.
/// Element scale of type "urn:apmech/skeletons":scale.
    genskel__scale*                      scale                          0;	///< Optional element.
/// Attribute time of type xs:string.
   @std::string                          time                           1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:apmech/skeletons":translate of complexType.

/// "urn:apmech/skeletons":translate is a complexType.
class _genskel__translate
{ public:
/// Attribute x of type xs:string.
   @std::string                          x                              1;	///< Required attribute.
/// Attribute y of type xs:string.
   @std::string                          y                              1;	///< Required attribute.
/// Attribute z of type xs:string.
   @std::string                          z                              1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:apmech/skeletons":rotate of complexType.

/// "urn:apmech/skeletons":rotate is a complexType.
class _genskel__rotate
{ public:
/// Element axis of type "urn:apmech/skeletons":axis.
    genskel__axis*                       axis                           1;	///< Required element.
/// Attribute angle of type xs:string.
   @std::string                          angle                          1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:apmech/skeletons":animationlinks of complexType.

/// "urn:apmech/skeletons":animationlinks is a complexType.
class _genskel__animationlinks
{ public:
/// Vector of _genskel__animationlink* with length 1..unbounded
    std::vector<_genskel__animationlink*> genskel__animationlink         1;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:apmech/skeletons":animationlink of complexType.

/// "urn:apmech/skeletons":animationlink is a complexType.
class _genskel__animationlink
{ public:
/// Attribute skeletonName of type xs:string.
   @std::string                          skeletonName                   1;	///< Required attribute.
/// Attribute scale of type xs:string.
   @std::string                          scale                          0 = "1.0";	///< Default value="1.0".
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/* End of generated_h.h */
