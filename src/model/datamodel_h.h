/* datamodel_h.h
   Generated by wsdl2h 1.2.9l from xsd/mech.xsd and typemap.dat
   2012-03-29 19:28:37 GMT
   Copyright (C) 2001-2007 Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/* NOTE:

 - Compile this file with soapcpp2 to complete the code generation process.
 - Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control schema namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) to browse this file.
 - Use wsdl2h option -l to view the software license terms.

   DO NOT include this file directly into your project.
   Include only the soapcpp2-generated headers and source code files.
*/

//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * urn:apmech/mechs/1                                                         *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to disable)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

genmech = "urn:apmech/mechs/1"

*/

//gsoap genmech schema namespace:	urn:apmech/mechs/1
//gsoap genmech schema elementForm:	qualified
//gsoap genmech schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Schema Types                                                               *
 *                                                                            *
\******************************************************************************/



//  Forward declaration of class genmech__stats.
class genmech__stats;

//  Forward declaration of class genmech__design.
class genmech__design;

//  Forward declaration of class genmech__equSlots.
class genmech__equSlots;

//  Forward declaration of class genmech__equSlot.
class genmech__equSlot;

//  Forward declaration of class genmech__torso.
class genmech__torso;

//  Forward declaration of class genmech__mesh.
class genmech__mesh;

//  Forward declaration of class _genmech__mech.
class _genmech__mech;

/// "urn:apmech/mechs/1":stats is a complexType.
class genmech__stats
{ public:
/// Element maxTurnRate of type xs:int.
    int                                  maxTurnRate                    1;	///< Required element.
/// Element maxForwardAcceleration of type xs:int.
    int                                  maxForwardAcceleration         1;	///< Required element.
/// Element maxBackwardAcceleration of type xs:int.
    int                                  maxBackwardAcceleration        1;	///< Required element.
/// Element maxSpeed of type xs:int.
    int                                  maxSpeed                       1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:apmech/mechs/1":design is a complexType.
class genmech__design
{ public:
/// Element torso of type "urn:apmech/mechs/1":torso.
    genmech__torso*                      torso                          1;	///< Required element.
/// Element equipmentSlots of type "urn:apmech/mechs/1":equSlots.
    genmech__equSlots*                   equipmentSlots                 1;	///< Required element.
/// Element torsoBone of type xs:string.
    std::string                          torsoBone                      1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:apmech/mechs/1":equSlots is a complexType.
class genmech__equSlots
{ public:
/// Vector of genmech__equSlot* with length 0..unbounded
    std::vector<genmech__equSlot*      > slot                           0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:apmech/mechs/1":equSlot is a complexType.
class genmech__equSlot
{ public:
/// Element boneName of type xs:string.
    std::string                          boneName                       1;	///< Required element.
/// Element defaultEqu of type xs:string.
    std::string                          defaultEqu                     1 = "UNUSED";	///< Default value="UNUSED".
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:apmech/mechs/1":torso is a complexType.
class genmech__torso
{ public:
/// Attribute turningRadius of type xs:int.
   @int                                  turningRadius                  0 = 90;	///< Default value="90".
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:apmech/mechs/1":mesh is a complexType.
class genmech__mesh
{ public:
/// Attribute translation of type xs:string.
   @std::string                          translation                    0 = "000.00;000.00;000.00";	///< Default value="000.00;000.00;000.00".
/// Attribute file of type xs:string.
   @std::string                          file                           1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "urn:apmech/mechs/1":mech of complexType.

/// "urn:apmech/mechs/1":mech is a complexType.
class _genmech__mech
{ public:
/// Element schemaVersion of type xs:int.
    int                                  schemaVersion                  1;	///< Required element.
/// Element name of type xs:string.
    std::string                          name                           1;	///< Required element.
/// Element stats of type "urn:apmech/mechs/1":stats.
    genmech__stats*                      stats                          1;	///< Required element.
/// Element design of type "urn:apmech/mechs/1":design.
    genmech__design*                     design                         1;	///< Required element.
/// Element mesh of type "urn:apmech/mechs/1":mesh.
    genmech__mesh*                       mesh                           1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/* End of datamodel_h.h */
