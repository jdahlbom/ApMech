/* datamodelStub.h
   Generated by gSOAP 2.7.9l from datamodel_h.h
   Copyright(C) 2000-2007, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef datamodelStub_H
#define datamodelStub_H
#include <vector>
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/




#ifndef SOAP_TYPE_genmech__stats
#define SOAP_TYPE_genmech__stats (7)
/* genmech:stats */
class SOAP_CMAC genmech__stats
{
public:
	int maxTurnRate;	/* required element of type xsd:int */
	int maxForwardAcceleration;	/* required element of type xsd:int */
	int maxBackwardAcceleration;	/* required element of type xsd:int */
	int maxSpeed;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 7; } /* = unique id SOAP_TYPE_genmech__stats */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         genmech__stats() : maxTurnRate(0), maxForwardAcceleration(0), maxBackwardAcceleration(0), maxSpeed(0), soap(NULL) { }
	virtual ~genmech__stats() { }
};
#endif

#if 0 /* volatile type: do not redeclare */

#endif

#ifndef SOAP_TYPE_genmech__design
#define SOAP_TYPE_genmech__design (8)
/* genmech:design */
class SOAP_CMAC genmech__design
{
public:
	class genmech__torso *torso;	/* required element of type genmech:torso */
	class genmech__equSlots *equipmentSlots;	/* required element of type genmech:equSlots */
	std::string torsoBone;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 8; } /* = unique id SOAP_TYPE_genmech__design */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         genmech__design() : torso(NULL), equipmentSlots(NULL), soap(NULL) { }
	virtual ~genmech__design() { }
};
#endif

#ifndef SOAP_TYPE_genmech__equSlots
#define SOAP_TYPE_genmech__equSlots (9)
/* genmech:equSlots */
class SOAP_CMAC genmech__equSlots
{
public:
	std::vector<class genmech__equSlot * >slot;	/* optional element of type genmech:equSlot */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 9; } /* = unique id SOAP_TYPE_genmech__equSlots */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         genmech__equSlots() : soap(NULL) { }
	virtual ~genmech__equSlots() { }
};
#endif

#ifndef SOAP_TYPE_genmech__equSlot
#define SOAP_TYPE_genmech__equSlot (10)
/* genmech:equSlot */
class SOAP_CMAC genmech__equSlot
{
public:
	std::string boneName;	/* required element of type xsd:string */
	std::string defaultEqu;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 10; } /* = unique id SOAP_TYPE_genmech__equSlot */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         genmech__equSlot() : defaultEqu("UNUSED"), soap(NULL) { }
	virtual ~genmech__equSlot() { }
};
#endif

#ifndef SOAP_TYPE_genmech__torso
#define SOAP_TYPE_genmech__torso (11)
/* genmech:torso */
class SOAP_CMAC genmech__torso
{
public:
	int turningRadius;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 11; } /* = unique id SOAP_TYPE_genmech__torso */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         genmech__torso() : turningRadius(90), soap(NULL) { }
	virtual ~genmech__torso() { }
};
#endif

#ifndef SOAP_TYPE_genmech__mesh
#define SOAP_TYPE_genmech__mesh (12)
/* genmech:mesh */
class SOAP_CMAC genmech__mesh
{
public:
	std::string translation;	/* optional attribute */
	std::string file;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE_genmech__mesh */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         genmech__mesh() : translation("000.00;000.00;000.00"), soap(NULL) { }
	virtual ~genmech__mesh() { }
};
#endif

#ifndef SOAP_TYPE__genmech__mech
#define SOAP_TYPE__genmech__mech (13)
/* genmech:mech */
class SOAP_CMAC _genmech__mech
{
public:
	int schemaVersion;	/* required element of type xsd:int */
	std::string name;	/* required element of type xsd:string */
	genmech__stats *stats;	/* required element of type genmech:stats */
	genmech__design *design;	/* required element of type genmech:design */
	genmech__mesh *mesh;	/* required element of type genmech:mesh */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 13; } /* = unique id SOAP_TYPE__genmech__mech */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _genmech__mech() : schemaVersion(0), stats(NULL), design(NULL), mesh(NULL), soap(NULL) { }
	virtual ~_genmech__mech() { }
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (24)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (25)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (27)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (30)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (31)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (4)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif


/******************************************************************************\
 *                                                                            *
 * Typedef Synonyms                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Stubs                                                                      *
 *                                                                            *
\******************************************************************************/


#endif

/* End of datamodelStub.h */
