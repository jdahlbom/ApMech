/* datamodelC.cpp
   Generated by gSOAP 2.7.9l from datamodel_h.h
   Copyright(C) 2000-2007, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "datamodelH.h"

SOAP_SOURCE_STAMP("@(#) datamodelC.cpp ver 2.7.9l 2012-03-29 19:28:37 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	soap->header = soap_new_SOAP_ENV__Header(soap, -1);
		soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	for (;;)
		if (!soap_getelement(soap, &t))
			if (soap->error || soap_ignore_element(soap))
				break;
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_genmech__mesh:
		return soap_in_genmech__mesh(soap, NULL, NULL, "genmech:mesh");
	case SOAP_TYPE_genmech__torso:
		return soap_in_genmech__torso(soap, NULL, NULL, "genmech:torso");
	case SOAP_TYPE_genmech__equSlot:
		return soap_in_genmech__equSlot(soap, NULL, NULL, "genmech:equSlot");
	case SOAP_TYPE_genmech__equSlots:
		return soap_in_genmech__equSlots(soap, NULL, NULL, "genmech:equSlots");
	case SOAP_TYPE_genmech__design:
		return soap_in_genmech__design(soap, NULL, NULL, "genmech:design");
	case SOAP_TYPE_genmech__stats:
		return soap_in_genmech__stats(soap, NULL, NULL, "genmech:stats");
	case SOAP_TYPE_PointerTogenmech__mesh:
		return soap_in_PointerTogenmech__mesh(soap, NULL, NULL, "genmech:mesh");
	case SOAP_TYPE_PointerTogenmech__design:
		return soap_in_PointerTogenmech__design(soap, NULL, NULL, "genmech:design");
	case SOAP_TYPE_PointerTogenmech__stats:
		return soap_in_PointerTogenmech__stats(soap, NULL, NULL, "genmech:stats");
	case SOAP_TYPE_PointerTogenmech__equSlot:
		return soap_in_PointerTogenmech__equSlot(soap, NULL, NULL, "genmech:equSlot");
	case SOAP_TYPE_PointerTogenmech__equSlots:
		return soap_in_PointerTogenmech__equSlots(soap, NULL, NULL, "genmech:equSlots");
	case SOAP_TYPE_PointerTogenmech__torso:
		return soap_in_PointerTogenmech__torso(soap, NULL, NULL, "genmech:torso");
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "genmech:mesh"))
		{	*type = SOAP_TYPE_genmech__mesh;
			return soap_in_genmech__mesh(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "genmech:torso"))
		{	*type = SOAP_TYPE_genmech__torso;
			return soap_in_genmech__torso(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "genmech:equSlot"))
		{	*type = SOAP_TYPE_genmech__equSlot;
			return soap_in_genmech__equSlot(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "genmech:equSlots"))
		{	*type = SOAP_TYPE_genmech__equSlots;
			return soap_in_genmech__equSlots(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "genmech:design"))
		{	*type = SOAP_TYPE_genmech__design;
			return soap_in_genmech__design(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "genmech:stats"))
		{	*type = SOAP_TYPE_genmech__stats;
			return soap_in_genmech__stats(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "genmech:mech"))
		{	*type = SOAP_TYPE__genmech__mech;
			return soap_in__genmech__mech(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unknown element '%s' (level=%u, %d)\n", soap->tag, soap->level, soap->body));
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE__genmech__mech:
		return ((_genmech__mech *)ptr)->soap_out(soap, "genmech:mech", id, NULL);
	case SOAP_TYPE_genmech__mesh:
		return ((genmech__mesh *)ptr)->soap_out(soap, tag, id, "genmech:mesh");
	case SOAP_TYPE_genmech__torso:
		return ((genmech__torso *)ptr)->soap_out(soap, tag, id, "genmech:torso");
	case SOAP_TYPE_genmech__equSlot:
		return ((genmech__equSlot *)ptr)->soap_out(soap, tag, id, "genmech:equSlot");
	case SOAP_TYPE_genmech__equSlots:
		return ((genmech__equSlots *)ptr)->soap_out(soap, tag, id, "genmech:equSlots");
	case SOAP_TYPE_genmech__design:
		return ((genmech__design *)ptr)->soap_out(soap, tag, id, "genmech:design");
	case SOAP_TYPE_genmech__stats:
		return ((genmech__stats *)ptr)->soap_out(soap, tag, id, "genmech:stats");
	case SOAP_TYPE_PointerTogenmech__mesh:
		return soap_out_PointerTogenmech__mesh(soap, tag, id, (genmech__mesh *const*)ptr, "genmech:mesh");
	case SOAP_TYPE_PointerTogenmech__design:
		return soap_out_PointerTogenmech__design(soap, tag, id, (genmech__design *const*)ptr, "genmech:design");
	case SOAP_TYPE_PointerTogenmech__stats:
		return soap_out_PointerTogenmech__stats(soap, tag, id, (genmech__stats *const*)ptr, "genmech:stats");
	case SOAP_TYPE_PointerTogenmech__equSlot:
		return soap_out_PointerTogenmech__equSlot(soap, tag, id, (genmech__equSlot *const*)ptr, "genmech:equSlot");
	case SOAP_TYPE_PointerTogenmech__equSlots:
		return soap_out_PointerTogenmech__equSlots(soap, tag, id, (genmech__equSlots *const*)ptr, "genmech:equSlots");
	case SOAP_TYPE_PointerTogenmech__torso:
		return soap_out_PointerTogenmech__torso(soap, tag, id, (genmech__torso *const*)ptr, "genmech:torso");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, "xsd:QName", id, (char*const*)&ptr, NULL);
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE__genmech__mech:
		((_genmech__mech *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_genmech__mesh:
		((genmech__mesh *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_genmech__torso:
		((genmech__torso *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_genmech__equSlot:
		((genmech__equSlot *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_genmech__equSlots:
		((genmech__equSlots *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_genmech__design:
		((genmech__design *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_genmech__stats:
		((genmech__stats *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_PointerTogenmech__mesh:
		soap_serialize_PointerTogenmech__mesh(soap, (genmech__mesh *const*)ptr);
		break;
	case SOAP_TYPE_PointerTogenmech__design:
		soap_serialize_PointerTogenmech__design(soap, (genmech__design *const*)ptr);
		break;
	case SOAP_TYPE_PointerTogenmech__stats:
		soap_serialize_PointerTogenmech__stats(soap, (genmech__stats *const*)ptr);
		break;
	case SOAP_TYPE_PointerTogenmech__equSlot:
		soap_serialize_PointerTogenmech__equSlot(soap, (genmech__equSlot *const*)ptr);
		break;
	case SOAP_TYPE_PointerTogenmech__equSlots:
		soap_serialize_PointerTogenmech__equSlots(soap, (genmech__equSlots *const*)ptr);
		break;
	case SOAP_TYPE_PointerTogenmech__torso:
		soap_serialize_PointerTogenmech__torso(soap, (genmech__torso *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE_genmech__stats:
		return (void*)soap_instantiate_genmech__stats(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_genmech__design:
		return (void*)soap_instantiate_genmech__design(soap, -1, type, arrayType, n);
	case SOAP_TYPE_genmech__equSlots:
		return (void*)soap_instantiate_genmech__equSlots(soap, -1, type, arrayType, n);
	case SOAP_TYPE_genmech__equSlot:
		return (void*)soap_instantiate_genmech__equSlot(soap, -1, type, arrayType, n);
	case SOAP_TYPE_genmech__torso:
		return (void*)soap_instantiate_genmech__torso(soap, -1, type, arrayType, n);
	case SOAP_TYPE_genmech__mesh:
		return (void*)soap_instantiate_genmech__mesh(soap, -1, type, arrayType, n);
	case SOAP_TYPE__genmech__mech:
		return (void*)soap_instantiate__genmech__mech(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_std__vectorTemplateOfPointerTogenmech__equSlot:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTogenmech__equSlot(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_genmech__stats:
		if (p->size < 0)
			delete (genmech__stats*)p->ptr;
		else
			delete[] (genmech__stats*)p->ptr;
		break;
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			delete (std::string*)p->ptr;
		else
			delete[] (std::string*)p->ptr;
		break;
	case SOAP_TYPE_genmech__design:
		if (p->size < 0)
			delete (genmech__design*)p->ptr;
		else
			delete[] (genmech__design*)p->ptr;
		break;
	case SOAP_TYPE_genmech__equSlots:
		if (p->size < 0)
			delete (genmech__equSlots*)p->ptr;
		else
			delete[] (genmech__equSlots*)p->ptr;
		break;
	case SOAP_TYPE_genmech__equSlot:
		if (p->size < 0)
			delete (genmech__equSlot*)p->ptr;
		else
			delete[] (genmech__equSlot*)p->ptr;
		break;
	case SOAP_TYPE_genmech__torso:
		if (p->size < 0)
			delete (genmech__torso*)p->ptr;
		else
			delete[] (genmech__torso*)p->ptr;
		break;
	case SOAP_TYPE_genmech__mesh:
		if (p->size < 0)
			delete (genmech__mesh*)p->ptr;
		else
			delete[] (genmech__mesh*)p->ptr;
		break;
	case SOAP_TYPE__genmech__mech:
		if (p->size < 0)
			delete (_genmech__mech*)p->ptr;
		else
			delete[] (_genmech__mech*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			delete (struct SOAP_ENV__Header*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Header*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			delete (struct SOAP_ENV__Code*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Code*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			delete (struct SOAP_ENV__Detail*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Detail*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			delete (struct SOAP_ENV__Reason*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Reason*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			delete (struct SOAP_ENV__Fault*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Fault*)p->ptr;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTogenmech__equSlot:
		if (p->size < 0)
			delete (std::vector<genmech__equSlot * >*)p->ptr;
		else
			delete[] (std::vector<genmech__equSlot * >*)p->ptr;
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{	switch (tt)
	{
	case SOAP_TYPE_std__vectorTemplateOfPointerTogenmech__equSlot:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<genmech__equSlot * >*)p)[len] = *(genmech__equSlot **)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	return soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	return soap_inint(soap, tag, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *p)
{	(void)soap; (void)p; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, type))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
			if ((t = soap_string_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC5 std::string * SOAP_FMAC6 soap_new_std__string(struct soap *soap, int n)
{	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_std__string(struct soap *soap, std::string *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::string;
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)new std::string[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

void _genmech__mech::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_genmech__mech::schemaVersion);
	soap_default_std__string(soap, &this->_genmech__mech::name);
	this->_genmech__mech::stats = NULL;
	this->_genmech__mech::design = NULL;
	this->_genmech__mech::mesh = NULL;
	/* transient soap skipped */
}

void _genmech__mech::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_genmech__mech::name);
	soap_serialize_PointerTogenmech__stats(soap, &this->_genmech__mech::stats);
	soap_serialize_PointerTogenmech__design(soap, &this->_genmech__mech::design);
	soap_serialize_PointerTogenmech__mesh(soap, &this->_genmech__mech::mesh);
	/* transient soap skipped */
}

int _genmech__mech::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__genmech__mech);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _genmech__mech::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__genmech__mech(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__genmech__mech(struct soap *soap, const char *tag, int id, const _genmech__mech *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__genmech__mech), type))
		return soap->error;
	if (soap_out_int(soap, "genmech:schemaVersion", -1, &(a->_genmech__mech::schemaVersion), ""))
		return soap->error;
	if (soap_out_std__string(soap, "genmech:name", -1, &(a->_genmech__mech::name), ""))
		return soap->error;
	if (soap_out_PointerTogenmech__stats(soap, "genmech:stats", -1, &(a->_genmech__mech::stats), ""))
		return soap->error;
	if (soap_out_PointerTogenmech__design(soap, "genmech:design", -1, &(a->_genmech__mech::design), ""))
		return soap->error;
	if (soap_out_PointerTogenmech__mesh(soap, "genmech:mesh", -1, &(a->_genmech__mech::mesh), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_genmech__mech::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__genmech__mech(soap, this, tag, type);
}

SOAP_FMAC3 _genmech__mech * SOAP_FMAC4 soap_get__genmech__mech(struct soap *soap, _genmech__mech *p, const char *tag, const char *type)
{
	if ((p = soap_in__genmech__mech(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_genmech__mech::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__genmech__mech(soap, tag, this, type);
}

SOAP_FMAC3 _genmech__mech * SOAP_FMAC4 soap_in__genmech__mech(struct soap *soap, const char *tag, _genmech__mech *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_genmech__mech *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__genmech__mech, sizeof(_genmech__mech), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__genmech__mech)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_genmech__mech *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_schemaVersion1 = 1, soap_flag_name1 = 1, soap_flag_stats1 = 1, soap_flag_design1 = 1, soap_flag_mesh1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_schemaVersion1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "genmech:schemaVersion", &(a->_genmech__mech::schemaVersion), "xsd:int"))
				{	soap_flag_schemaVersion1--;
					continue;
				}
			if (soap_flag_name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "genmech:name", &(a->_genmech__mech::name), "xsd:string"))
				{	soap_flag_name1--;
					continue;
				}
			if (soap_flag_stats1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTogenmech__stats(soap, "genmech:stats", &(a->_genmech__mech::stats), "genmech:stats"))
				{	soap_flag_stats1--;
					continue;
				}
			if (soap_flag_design1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTogenmech__design(soap, "genmech:design", &(a->_genmech__mech::design), "genmech:design"))
				{	soap_flag_design1--;
					continue;
				}
			if (soap_flag_mesh1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTogenmech__mesh(soap, "genmech:mesh", &(a->_genmech__mech::mesh), "genmech:mesh"))
				{	soap_flag_mesh1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_genmech__mech *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__genmech__mech, 0, sizeof(_genmech__mech), 0, soap_copy__genmech__mech);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_schemaVersion1 > 0 || soap_flag_name1 > 0 || soap_flag_stats1 > 0 || soap_flag_design1 > 0 || soap_flag_mesh1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _genmech__mech * SOAP_FMAC6 soap_new__genmech__mech(struct soap *soap, int n)
{	return soap_instantiate__genmech__mech(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__genmech__mech(struct soap *soap, _genmech__mech *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _genmech__mech * SOAP_FMAC4 soap_instantiate__genmech__mech(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__genmech__mech(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__genmech__mech, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _genmech__mech;
		if (size)
			*size = sizeof(_genmech__mech);
		((_genmech__mech*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _genmech__mech[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_genmech__mech);
		for (int i = 0; i < n; i++)
			((_genmech__mech*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_genmech__mech*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__genmech__mech(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _genmech__mech %p -> %p\n", q, p));
	*(_genmech__mech*)p = *(_genmech__mech*)q;
}

void genmech__mesh::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->genmech__mesh::translation = "000.00;000.00;000.00";
	soap_default_std__string(soap, &this->genmech__mesh::file);
	/* transient soap skipped */
}

void genmech__mesh::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int genmech__mesh::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_genmech__mesh);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int genmech__mesh::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_genmech__mesh(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_genmech__mesh(struct soap *soap, const char *tag, int id, const genmech__mesh *a, const char *type)
{
	if (!((genmech__mesh *)a)->translation.empty())
		soap_set_attr(soap, "translation", ((genmech__mesh *)a)->translation.c_str());
	if (!((genmech__mesh *)a)->file.empty())
		soap_set_attr(soap, "file", ((genmech__mesh *)a)->file.c_str());
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_genmech__mesh), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *genmech__mesh::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_genmech__mesh(soap, this, tag, type);
}

SOAP_FMAC3 genmech__mesh * SOAP_FMAC4 soap_get_genmech__mesh(struct soap *soap, genmech__mesh *p, const char *tag, const char *type)
{
	if ((p = soap_in_genmech__mesh(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *genmech__mesh::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_genmech__mesh(soap, tag, this, type);
}

SOAP_FMAC3 genmech__mesh * SOAP_FMAC4 soap_in_genmech__mesh(struct soap *soap, const char *tag, genmech__mesh *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (genmech__mesh *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_genmech__mesh, sizeof(genmech__mesh), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_genmech__mesh)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (genmech__mesh *)a->soap_in(soap, tag, type);
		}
	}
	{	const char *t = soap_attr_value(soap, "translation", 0);
		if (t)
		{	char *s;
			if (soap_s2string(soap, t, &s))
				return NULL;
			((genmech__mesh *)a)->translation.assign(s);
		}
	}
	{	const char *t = soap_attr_value(soap, "file", 1);
		if (t)
		{	char *s;
			if (soap_s2string(soap, t, &s))
				return NULL;
			((genmech__mesh *)a)->file.assign(s);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (genmech__mesh *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_genmech__mesh, 0, sizeof(genmech__mesh), 0, soap_copy_genmech__mesh);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 genmech__mesh * SOAP_FMAC6 soap_new_genmech__mesh(struct soap *soap, int n)
{	return soap_instantiate_genmech__mesh(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_genmech__mesh(struct soap *soap, genmech__mesh *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 genmech__mesh * SOAP_FMAC4 soap_instantiate_genmech__mesh(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_genmech__mesh(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_genmech__mesh, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new genmech__mesh;
		if (size)
			*size = sizeof(genmech__mesh);
		((genmech__mesh*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new genmech__mesh[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(genmech__mesh);
		for (int i = 0; i < n; i++)
			((genmech__mesh*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (genmech__mesh*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_genmech__mesh(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying genmech__mesh %p -> %p\n", q, p));
	*(genmech__mesh*)p = *(genmech__mesh*)q;
}

void genmech__torso::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->genmech__torso::turningRadius = 90;
	/* transient soap skipped */
}

void genmech__torso::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int genmech__torso::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_genmech__torso);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int genmech__torso::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_genmech__torso(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_genmech__torso(struct soap *soap, const char *tag, int id, const genmech__torso *a, const char *type)
{
	soap_set_attr(soap, "turningRadius", soap_int2s(soap, ((genmech__torso *)a)->turningRadius));
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_genmech__torso), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *genmech__torso::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_genmech__torso(soap, this, tag, type);
}

SOAP_FMAC3 genmech__torso * SOAP_FMAC4 soap_get_genmech__torso(struct soap *soap, genmech__torso *p, const char *tag, const char *type)
{
	if ((p = soap_in_genmech__torso(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *genmech__torso::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_genmech__torso(soap, tag, this, type);
}

SOAP_FMAC3 genmech__torso * SOAP_FMAC4 soap_in_genmech__torso(struct soap *soap, const char *tag, genmech__torso *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (genmech__torso *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_genmech__torso, sizeof(genmech__torso), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_genmech__torso)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (genmech__torso *)a->soap_in(soap, tag, type);
		}
	}
	if (soap_s2int(soap, soap_attr_value(soap, "turningRadius", 0), &((genmech__torso *)a)->turningRadius))
		return NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (genmech__torso *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_genmech__torso, 0, sizeof(genmech__torso), 0, soap_copy_genmech__torso);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 genmech__torso * SOAP_FMAC6 soap_new_genmech__torso(struct soap *soap, int n)
{	return soap_instantiate_genmech__torso(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_genmech__torso(struct soap *soap, genmech__torso *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 genmech__torso * SOAP_FMAC4 soap_instantiate_genmech__torso(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_genmech__torso(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_genmech__torso, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new genmech__torso;
		if (size)
			*size = sizeof(genmech__torso);
		((genmech__torso*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new genmech__torso[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(genmech__torso);
		for (int i = 0; i < n; i++)
			((genmech__torso*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (genmech__torso*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_genmech__torso(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying genmech__torso %p -> %p\n", q, p));
	*(genmech__torso*)p = *(genmech__torso*)q;
}

void genmech__equSlot::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->genmech__equSlot::boneName);
	this->genmech__equSlot::defaultEqu = "UNUSED";
	/* transient soap skipped */
}

void genmech__equSlot::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->genmech__equSlot::boneName);
	soap_serialize_std__string(soap, &this->genmech__equSlot::defaultEqu);
	/* transient soap skipped */
}

int genmech__equSlot::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_genmech__equSlot);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int genmech__equSlot::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_genmech__equSlot(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_genmech__equSlot(struct soap *soap, const char *tag, int id, const genmech__equSlot *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_genmech__equSlot), type))
		return soap->error;
	if (soap_out_std__string(soap, "genmech:boneName", -1, &(a->genmech__equSlot::boneName), ""))
		return soap->error;
	if (soap_out_std__string(soap, "genmech:defaultEqu", -1, &(a->genmech__equSlot::defaultEqu), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *genmech__equSlot::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_genmech__equSlot(soap, this, tag, type);
}

SOAP_FMAC3 genmech__equSlot * SOAP_FMAC4 soap_get_genmech__equSlot(struct soap *soap, genmech__equSlot *p, const char *tag, const char *type)
{
	if ((p = soap_in_genmech__equSlot(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *genmech__equSlot::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_genmech__equSlot(soap, tag, this, type);
}

SOAP_FMAC3 genmech__equSlot * SOAP_FMAC4 soap_in_genmech__equSlot(struct soap *soap, const char *tag, genmech__equSlot *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (genmech__equSlot *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_genmech__equSlot, sizeof(genmech__equSlot), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_genmech__equSlot)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (genmech__equSlot *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_boneName1 = 1, soap_flag_defaultEqu1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_boneName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "genmech:boneName", &(a->genmech__equSlot::boneName), "xsd:string"))
				{	soap_flag_boneName1--;
					continue;
				}
			if (soap_flag_defaultEqu1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "genmech:defaultEqu", &(a->genmech__equSlot::defaultEqu), "xsd:string"))
				{	soap_flag_defaultEqu1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (genmech__equSlot *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_genmech__equSlot, 0, sizeof(genmech__equSlot), 0, soap_copy_genmech__equSlot);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_boneName1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 genmech__equSlot * SOAP_FMAC6 soap_new_genmech__equSlot(struct soap *soap, int n)
{	return soap_instantiate_genmech__equSlot(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_genmech__equSlot(struct soap *soap, genmech__equSlot *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 genmech__equSlot * SOAP_FMAC4 soap_instantiate_genmech__equSlot(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_genmech__equSlot(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_genmech__equSlot, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new genmech__equSlot;
		if (size)
			*size = sizeof(genmech__equSlot);
		((genmech__equSlot*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new genmech__equSlot[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(genmech__equSlot);
		for (int i = 0; i < n; i++)
			((genmech__equSlot*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (genmech__equSlot*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_genmech__equSlot(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying genmech__equSlot %p -> %p\n", q, p));
	*(genmech__equSlot*)p = *(genmech__equSlot*)q;
}

void genmech__equSlots::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTogenmech__equSlot(soap, &this->genmech__equSlots::slot);
	/* transient soap skipped */
}

void genmech__equSlots::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfPointerTogenmech__equSlot(soap, &this->genmech__equSlots::slot);
	/* transient soap skipped */
}

int genmech__equSlots::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_genmech__equSlots);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int genmech__equSlots::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_genmech__equSlots(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_genmech__equSlots(struct soap *soap, const char *tag, int id, const genmech__equSlots *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_genmech__equSlots), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTogenmech__equSlot(soap, "genmech:slot", -1, &(a->genmech__equSlots::slot), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *genmech__equSlots::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_genmech__equSlots(soap, this, tag, type);
}

SOAP_FMAC3 genmech__equSlots * SOAP_FMAC4 soap_get_genmech__equSlots(struct soap *soap, genmech__equSlots *p, const char *tag, const char *type)
{
	if ((p = soap_in_genmech__equSlots(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *genmech__equSlots::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_genmech__equSlots(soap, tag, this, type);
}

SOAP_FMAC3 genmech__equSlots * SOAP_FMAC4 soap_in_genmech__equSlots(struct soap *soap, const char *tag, genmech__equSlots *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (genmech__equSlots *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_genmech__equSlots, sizeof(genmech__equSlots), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_genmech__equSlots)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (genmech__equSlots *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTogenmech__equSlot(soap, "genmech:slot", &(a->genmech__equSlots::slot), "genmech:equSlot"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (genmech__equSlots *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_genmech__equSlots, 0, sizeof(genmech__equSlots), 0, soap_copy_genmech__equSlots);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 genmech__equSlots * SOAP_FMAC6 soap_new_genmech__equSlots(struct soap *soap, int n)
{	return soap_instantiate_genmech__equSlots(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_genmech__equSlots(struct soap *soap, genmech__equSlots *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 genmech__equSlots * SOAP_FMAC4 soap_instantiate_genmech__equSlots(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_genmech__equSlots(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_genmech__equSlots, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new genmech__equSlots;
		if (size)
			*size = sizeof(genmech__equSlots);
		((genmech__equSlots*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new genmech__equSlots[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(genmech__equSlots);
		for (int i = 0; i < n; i++)
			((genmech__equSlots*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (genmech__equSlots*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_genmech__equSlots(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying genmech__equSlots %p -> %p\n", q, p));
	*(genmech__equSlots*)p = *(genmech__equSlots*)q;
}

void genmech__design::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->genmech__design::torso = NULL;
	this->genmech__design::equipmentSlots = NULL;
	soap_default_std__string(soap, &this->genmech__design::torsoBone);
	/* transient soap skipped */
}

void genmech__design::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTogenmech__torso(soap, &this->genmech__design::torso);
	soap_serialize_PointerTogenmech__equSlots(soap, &this->genmech__design::equipmentSlots);
	soap_serialize_std__string(soap, &this->genmech__design::torsoBone);
	/* transient soap skipped */
}

int genmech__design::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_genmech__design);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int genmech__design::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_genmech__design(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_genmech__design(struct soap *soap, const char *tag, int id, const genmech__design *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_genmech__design), type))
		return soap->error;
	if (soap_out_PointerTogenmech__torso(soap, "genmech:torso", -1, &(a->genmech__design::torso), ""))
		return soap->error;
	if (soap_out_PointerTogenmech__equSlots(soap, "genmech:equipmentSlots", -1, &(a->genmech__design::equipmentSlots), ""))
		return soap->error;
	if (soap_out_std__string(soap, "genmech:torsoBone", -1, &(a->genmech__design::torsoBone), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *genmech__design::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_genmech__design(soap, this, tag, type);
}

SOAP_FMAC3 genmech__design * SOAP_FMAC4 soap_get_genmech__design(struct soap *soap, genmech__design *p, const char *tag, const char *type)
{
	if ((p = soap_in_genmech__design(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *genmech__design::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_genmech__design(soap, tag, this, type);
}

SOAP_FMAC3 genmech__design * SOAP_FMAC4 soap_in_genmech__design(struct soap *soap, const char *tag, genmech__design *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (genmech__design *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_genmech__design, sizeof(genmech__design), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_genmech__design)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (genmech__design *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_torso1 = 1, soap_flag_equipmentSlots1 = 1, soap_flag_torsoBone1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_torso1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTogenmech__torso(soap, "genmech:torso", &(a->genmech__design::torso), "genmech:torso"))
				{	soap_flag_torso1--;
					continue;
				}
			if (soap_flag_equipmentSlots1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTogenmech__equSlots(soap, "genmech:equipmentSlots", &(a->genmech__design::equipmentSlots), "genmech:equSlots"))
				{	soap_flag_equipmentSlots1--;
					continue;
				}
			if (soap_flag_torsoBone1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "genmech:torsoBone", &(a->genmech__design::torsoBone), "xsd:string"))
				{	soap_flag_torsoBone1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (genmech__design *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_genmech__design, 0, sizeof(genmech__design), 0, soap_copy_genmech__design);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_torso1 > 0 || soap_flag_equipmentSlots1 > 0 || soap_flag_torsoBone1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 genmech__design * SOAP_FMAC6 soap_new_genmech__design(struct soap *soap, int n)
{	return soap_instantiate_genmech__design(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_genmech__design(struct soap *soap, genmech__design *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 genmech__design * SOAP_FMAC4 soap_instantiate_genmech__design(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_genmech__design(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_genmech__design, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new genmech__design;
		if (size)
			*size = sizeof(genmech__design);
		((genmech__design*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new genmech__design[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(genmech__design);
		for (int i = 0; i < n; i++)
			((genmech__design*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (genmech__design*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_genmech__design(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying genmech__design %p -> %p\n", q, p));
	*(genmech__design*)p = *(genmech__design*)q;
}

void genmech__stats::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->genmech__stats::maxTurnRate);
	soap_default_int(soap, &this->genmech__stats::maxForwardAcceleration);
	soap_default_int(soap, &this->genmech__stats::maxBackwardAcceleration);
	soap_default_int(soap, &this->genmech__stats::maxSpeed);
	/* transient soap skipped */
}

void genmech__stats::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int genmech__stats::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_genmech__stats);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int genmech__stats::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_genmech__stats(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_genmech__stats(struct soap *soap, const char *tag, int id, const genmech__stats *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_genmech__stats), type))
		return soap->error;
	if (soap_out_int(soap, "genmech:maxTurnRate", -1, &(a->genmech__stats::maxTurnRate), ""))
		return soap->error;
	if (soap_out_int(soap, "genmech:maxForwardAcceleration", -1, &(a->genmech__stats::maxForwardAcceleration), ""))
		return soap->error;
	if (soap_out_int(soap, "genmech:maxBackwardAcceleration", -1, &(a->genmech__stats::maxBackwardAcceleration), ""))
		return soap->error;
	if (soap_out_int(soap, "genmech:maxSpeed", -1, &(a->genmech__stats::maxSpeed), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *genmech__stats::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_genmech__stats(soap, this, tag, type);
}

SOAP_FMAC3 genmech__stats * SOAP_FMAC4 soap_get_genmech__stats(struct soap *soap, genmech__stats *p, const char *tag, const char *type)
{
	if ((p = soap_in_genmech__stats(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *genmech__stats::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_genmech__stats(soap, tag, this, type);
}

SOAP_FMAC3 genmech__stats * SOAP_FMAC4 soap_in_genmech__stats(struct soap *soap, const char *tag, genmech__stats *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (genmech__stats *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_genmech__stats, sizeof(genmech__stats), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_genmech__stats)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (genmech__stats *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_maxTurnRate1 = 1, soap_flag_maxForwardAcceleration1 = 1, soap_flag_maxBackwardAcceleration1 = 1, soap_flag_maxSpeed1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_maxTurnRate1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "genmech:maxTurnRate", &(a->genmech__stats::maxTurnRate), "xsd:int"))
				{	soap_flag_maxTurnRate1--;
					continue;
				}
			if (soap_flag_maxForwardAcceleration1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "genmech:maxForwardAcceleration", &(a->genmech__stats::maxForwardAcceleration), "xsd:int"))
				{	soap_flag_maxForwardAcceleration1--;
					continue;
				}
			if (soap_flag_maxBackwardAcceleration1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "genmech:maxBackwardAcceleration", &(a->genmech__stats::maxBackwardAcceleration), "xsd:int"))
				{	soap_flag_maxBackwardAcceleration1--;
					continue;
				}
			if (soap_flag_maxSpeed1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "genmech:maxSpeed", &(a->genmech__stats::maxSpeed), "xsd:int"))
				{	soap_flag_maxSpeed1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (genmech__stats *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_genmech__stats, 0, sizeof(genmech__stats), 0, soap_copy_genmech__stats);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_maxTurnRate1 > 0 || soap_flag_maxForwardAcceleration1 > 0 || soap_flag_maxBackwardAcceleration1 > 0 || soap_flag_maxSpeed1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 genmech__stats * SOAP_FMAC6 soap_new_genmech__stats(struct soap *soap, int n)
{	return soap_instantiate_genmech__stats(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_genmech__stats(struct soap *soap, genmech__stats *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 genmech__stats * SOAP_FMAC4 soap_instantiate_genmech__stats(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_genmech__stats(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_genmech__stats, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new genmech__stats;
		if (size)
			*size = sizeof(genmech__stats);
		((genmech__stats*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new genmech__stats[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(genmech__stats);
		for (int i = 0; i < n; i++)
			((genmech__stats*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (genmech__stats*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_genmech__stats(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying genmech__stats %p -> %p\n", q, p));
	*(genmech__stats*)p = *(genmech__stats*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	short soap_flag_faultcode = 1, soap_flag_faultstring = 1, soap_flag_faultactor = 1, soap_flag_detail = 1, soap_flag_SOAP_ENV__Code = 1, soap_flag_SOAP_ENV__Reason = 1, soap_flag_SOAP_ENV__Node = 1, soap_flag_SOAP_ENV__Role = 1, soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Fault * SOAP_FMAC6 soap_new_SOAP_ENV__Fault(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Fault;
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Fault[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	short soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Reason * SOAP_FMAC6 soap_new_SOAP_ENV__Reason(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Reason;
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Reason[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__type = 0;
	a->fault = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	short soap_flag_fault = 1, soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Detail * SOAP_FMAC6 soap_new_SOAP_ENV__Detail(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Detail;
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Detail[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	short soap_flag_SOAP_ENV__Value = 1, soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Code * SOAP_FMAC6 soap_new_SOAP_ENV__Code(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Code;
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Code[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Header * SOAP_FMAC6 soap_new_SOAP_ENV__Header(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Header;
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Header[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTogenmech__mesh(struct soap *soap, genmech__mesh *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_genmech__mesh))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTogenmech__mesh(struct soap *soap, genmech__mesh *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTogenmech__mesh);
	if (soap_out_PointerTogenmech__mesh(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTogenmech__mesh(struct soap *soap, const char *tag, int id, genmech__mesh *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_genmech__mesh);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 genmech__mesh ** SOAP_FMAC4 soap_get_PointerTogenmech__mesh(struct soap *soap, genmech__mesh **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTogenmech__mesh(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 genmech__mesh ** SOAP_FMAC4 soap_in_PointerTogenmech__mesh(struct soap *soap, const char *tag, genmech__mesh **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (genmech__mesh **)soap_malloc(soap, sizeof(genmech__mesh *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (genmech__mesh *)soap_instantiate_genmech__mesh(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	genmech__mesh ** p = (genmech__mesh **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_genmech__mesh, sizeof(genmech__mesh), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTogenmech__design(struct soap *soap, genmech__design *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_genmech__design))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTogenmech__design(struct soap *soap, genmech__design *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTogenmech__design);
	if (soap_out_PointerTogenmech__design(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTogenmech__design(struct soap *soap, const char *tag, int id, genmech__design *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_genmech__design);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 genmech__design ** SOAP_FMAC4 soap_get_PointerTogenmech__design(struct soap *soap, genmech__design **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTogenmech__design(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 genmech__design ** SOAP_FMAC4 soap_in_PointerTogenmech__design(struct soap *soap, const char *tag, genmech__design **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (genmech__design **)soap_malloc(soap, sizeof(genmech__design *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (genmech__design *)soap_instantiate_genmech__design(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	genmech__design ** p = (genmech__design **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_genmech__design, sizeof(genmech__design), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTogenmech__stats(struct soap *soap, genmech__stats *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_genmech__stats))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTogenmech__stats(struct soap *soap, genmech__stats *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTogenmech__stats);
	if (soap_out_PointerTogenmech__stats(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTogenmech__stats(struct soap *soap, const char *tag, int id, genmech__stats *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_genmech__stats);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 genmech__stats ** SOAP_FMAC4 soap_get_PointerTogenmech__stats(struct soap *soap, genmech__stats **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTogenmech__stats(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 genmech__stats ** SOAP_FMAC4 soap_in_PointerTogenmech__stats(struct soap *soap, const char *tag, genmech__stats **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (genmech__stats **)soap_malloc(soap, sizeof(genmech__stats *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (genmech__stats *)soap_instantiate_genmech__stats(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	genmech__stats ** p = (genmech__stats **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_genmech__stats, sizeof(genmech__stats), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTogenmech__equSlot(struct soap *soap, genmech__equSlot *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_genmech__equSlot))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTogenmech__equSlot(struct soap *soap, genmech__equSlot *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTogenmech__equSlot);
	if (soap_out_PointerTogenmech__equSlot(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTogenmech__equSlot(struct soap *soap, const char *tag, int id, genmech__equSlot *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_genmech__equSlot);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 genmech__equSlot ** SOAP_FMAC4 soap_get_PointerTogenmech__equSlot(struct soap *soap, genmech__equSlot **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTogenmech__equSlot(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 genmech__equSlot ** SOAP_FMAC4 soap_in_PointerTogenmech__equSlot(struct soap *soap, const char *tag, genmech__equSlot **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (genmech__equSlot **)soap_malloc(soap, sizeof(genmech__equSlot *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (genmech__equSlot *)soap_instantiate_genmech__equSlot(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	genmech__equSlot ** p = (genmech__equSlot **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_genmech__equSlot, sizeof(genmech__equSlot), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTogenmech__equSlots(struct soap *soap, genmech__equSlots *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_genmech__equSlots))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTogenmech__equSlots(struct soap *soap, genmech__equSlots *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTogenmech__equSlots);
	if (soap_out_PointerTogenmech__equSlots(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTogenmech__equSlots(struct soap *soap, const char *tag, int id, genmech__equSlots *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_genmech__equSlots);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 genmech__equSlots ** SOAP_FMAC4 soap_get_PointerTogenmech__equSlots(struct soap *soap, genmech__equSlots **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTogenmech__equSlots(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 genmech__equSlots ** SOAP_FMAC4 soap_in_PointerTogenmech__equSlots(struct soap *soap, const char *tag, genmech__equSlots **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (genmech__equSlots **)soap_malloc(soap, sizeof(genmech__equSlots *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (genmech__equSlots *)soap_instantiate_genmech__equSlots(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	genmech__equSlots ** p = (genmech__equSlots **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_genmech__equSlots, sizeof(genmech__equSlots), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTogenmech__torso(struct soap *soap, genmech__torso *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_genmech__torso))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTogenmech__torso(struct soap *soap, genmech__torso *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTogenmech__torso);
	if (soap_out_PointerTogenmech__torso(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTogenmech__torso(struct soap *soap, const char *tag, int id, genmech__torso *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_genmech__torso);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 genmech__torso ** SOAP_FMAC4 soap_get_PointerTogenmech__torso(struct soap *soap, genmech__torso **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTogenmech__torso(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 genmech__torso ** SOAP_FMAC4 soap_in_PointerTogenmech__torso(struct soap *soap, const char *tag, genmech__torso **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (genmech__torso **)soap_malloc(soap, sizeof(genmech__torso *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (genmech__torso *)soap_instantiate_genmech__torso(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	genmech__torso ** p = (genmech__torso **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_genmech__torso, sizeof(genmech__torso), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__QName(struct soap *soap, char **a)
{	soap_default_string(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{	soap_serialize_string(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, -1, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, -1, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTogenmech__equSlot(struct soap *soap, std::vector<genmech__equSlot * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTogenmech__equSlot(struct soap *soap, const std::vector<genmech__equSlot * >*a)
{
	for (std::vector<genmech__equSlot * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTogenmech__equSlot(soap, &(*i));
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTogenmech__equSlot(struct soap *soap, const char *tag, int id, const std::vector<genmech__equSlot * >*a, const char *type)
{
	for (std::vector<genmech__equSlot * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTogenmech__equSlot(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<genmech__equSlot * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTogenmech__equSlot(struct soap *soap, const char *tag, std::vector<genmech__equSlot * >*a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfPointerTogenmech__equSlot(soap, -1)))
		return NULL;
	genmech__equSlot *n;
	short soap_flag = 0;
	do
	{	soap_revert(soap);
		n = NULL;
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_genmech__equSlot, SOAP_TYPE_std__vectorTemplateOfPointerTogenmech__equSlot, sizeof(genmech__equSlot), 1))
				break;
			if (!soap_in_PointerTogenmech__equSlot(soap, tag, NULL, "genmech:equSlot"))
				break;
		}
		else
		{
			if (!soap_in_PointerTogenmech__equSlot(soap, tag, &n, "genmech:equSlot"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (!soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC5 std::vector<genmech__equSlot * > * SOAP_FMAC6 soap_new_std__vectorTemplateOfPointerTogenmech__equSlot(struct soap *soap, int n)
{	return soap_instantiate_std__vectorTemplateOfPointerTogenmech__equSlot(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_std__vectorTemplateOfPointerTogenmech__equSlot(struct soap *soap, std::vector<genmech__equSlot * >*p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::vector<genmech__equSlot * > * SOAP_FMAC4 soap_instantiate_std__vectorTemplateOfPointerTogenmech__equSlot(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTogenmech__equSlot(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTogenmech__equSlot, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::vector<genmech__equSlot * >;
		if (size)
			*size = sizeof(std::vector<genmech__equSlot * >);
	}
	else
	{	cp->ptr = (void*)new std::vector<genmech__equSlot * >[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<genmech__equSlot * >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<genmech__equSlot * >*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTogenmech__equSlot(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<genmech__equSlot * > %p -> %p\n", q, p));
	*(std::vector<genmech__equSlot * >*)p = *(std::vector<genmech__equSlot * >*)q;
}

/* End of datamodelC.cpp */
